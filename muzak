#!/usr/bin/env python3
import argparse
import os
import shlex
import socket
import subprocess
import sys
from typing import Optional


def sh(cmdstr: str, cwd: Optional[str] = None) -> str:
    cmd = shlex.split(cmdstr)

    proc = subprocess.run(cmd, text=True, capture_output=True)
    if code := proc.returncode:
        print(f'{cmdstr} with cwd {cwd} exited with code {code}, stderr: {proc.stderr.strip()}')
        sys.exit(code)
    return proc.stdout.strip()


def sh_input(cmdstr: str, cwd: Optional[str] = None) -> None:
    cmd = shlex.split(cmdstr)
    proc = subprocess.run(cmd, cwd=cwd)
    if code := proc.returncode:
        print(f'{cmdstr} exited with code {code}')
        sys.exit(code)


def ensure_agent_key():
    if sh('ssh-add -l'):
        return

    hostname = socket.gethostname()
    home = os.getenv('HOME')
    sh_input(f'ssh-add {home}/.ssh/{hostname}')


def get_root_dir() -> str:
    return os.path.dirname(os.path.realpath(sys.argv[0]))


def is_managed_connection() -> bool:
    wireless_networks = [ssid.split(':') for ssid in sh('nmcli --terse -f SSID,ACTIVE device wifi').split('\n')]
    active_ssids = [ssid[0] for ssid in wireless_networks if ssid[1] == 'yes']
    if len(active_ssids) != 1:
        raise Exception('Unexpected number of active SSIDs: {len(active_ssids)}')

    managed_ssid = sh('pass meta/managed-connection/ssid')
    return managed_ssid == active_ssids[0]


def ansible_playbook(playbook: str, root_dir: Optional[str] = None) -> None:
    sh_input(f'ansible-playbook {playbook}', cwd=root_dir)


def down():
    root_dir = get_root_dir()
    terraform_dir = os.path.join(root_dir, 'terraform')
    managed_connection = is_managed_connection()
    sh_input(f'terraform destroy -auto-approve -var managed_connection={str(managed_connection).lower()}',
             cwd=terraform_dir)


def up():
    ensure_agent_key()
    root_dir = get_root_dir()

    managed_connection = is_managed_connection()
    ansible_dir = os.path.join(root_dir, 'ansible')
    terraform_dir = os.path.join(root_dir, 'terraform')

    sh_input('just init', cwd=terraform_dir)
    sh_input(f'terraform apply -auto-approve -var managed_connection={str(managed_connection).lower()}',
             cwd=terraform_dir)
    ansible_playbook('muzak.yml', root_dir=ansible_dir)


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    sub = subparsers.add_parser('down', aliases=['d'])
    sub.set_defaults(func=down)

    sub = subparsers.add_parser('up', aliases=['u'])
    sub.set_defaults(func=up)

    args = parser.parse_args()

    if not hasattr(args, 'func'):
        parser.print_help()
        return

    args.func()


if __name__ == '__main__':
    main()

#!/usr/bin/env python3
import argparse
import dataclasses
import datetime
import os
import shlex
import socket
import subprocess
import sys
from subprocess import PIPE, Popen
from typing import Optional

# Seconds
CERT_EXPIRY_TOLERANCE = 60 * 60 * 24


@dataclasses.dataclass
class Args:
    fetch_certificate: bool = False
    staging_acme_server: bool = False


def sh(cmdstr: str, cwd: Optional[str] = None) -> str:
    cmd = shlex.split(cmdstr)

    proc = subprocess.run(cmd, text=True, capture_output=True)
    if code := proc.returncode:
        print(f'{cmdstr} with cwd {cwd} exited with code {code}, stderr: {proc.stderr.strip()}')
        sys.exit(code)
    return proc.stdout.strip()


def sh_input(cmdstr: str, cwd: Optional[str] = None) -> None:
    cmd = shlex.split(cmdstr)
    proc = subprocess.run(cmd, cwd=cwd)
    if code := proc.returncode:
        print(f'{cmdstr} exited with code {code}')
        sys.exit(code)


def ensure_agent_key():
    if sh('ssh-add -l'):
        return

    hostname = socket.gethostname()
    home = os.getenv('HOME')
    sh_input(f'ssh-add {home}/.ssh/{hostname}')


def get_root_dir() -> str:
    return os.path.dirname(os.path.realpath(sys.argv[0]))


def is_managed_connection() -> bool:
    wireless_networks = [ssid.split(':') for ssid in sh('nmcli --terse -f SSID,ACTIVE device wifi').split('\n')]
    active_ssids = [ssid[0] for ssid in wireless_networks if ssid[1] == 'yes']

    if not active_ssids:
        # No good answers here
        return True

    if len(active_ssids) != 1:
        raise Exception('Unexpected number of active SSIDs: {len(active_ssids)}')

    managed_ssid = sh('pass meta/managed-connection/ssid')
    return managed_ssid == active_ssids[0]


def down(args: Args):
    root_dir = get_root_dir()
    terraform_dir = os.path.join(root_dir, 'terraform')
    sh_input('terraform destroy -auto-approve', cwd=terraform_dir)


def ansible_playbook(playbook_args: str, root_dir: Optional[str] = None) -> None:
    if 'ANSIBLE_CONFIG' in os.environ:
        del os.environ['ANSIBLE_CONFIG']
    sh_input(f'ansible-playbook {playbook_args}', cwd=root_dir)


def get_cert_date() -> datetime.datetime:
    root_dir = get_root_dir()
    cert = sh(f'sops -d {root_dir}/ansible/certs/cert.crt.sops')
    openssl = shlex.split('openssl x509 -enddate -noout')

    with Popen(openssl, stdin=PIPE, stdout=PIPE, stderr=PIPE, text=True) as proc:
        stdout, _ = proc.communicate(input=cert)
        date = stdout.strip().split('=')[-1]
        return datetime.datetime.strptime(date, '%b %d %H:%M:%S %Y %Z')


def cert_expiry_safe() -> bool:
    cert_expires_on = get_cert_date()
    now = datetime.datetime.now()
    expires_in = cert_expires_on - now
    return expires_in.total_seconds() > CERT_EXPIRY_TOLERANCE


def up(args: Args):
    ensure_agent_key()
    root_dir = get_root_dir()

    saved_cert_valid = False if args.fetch_certificate else cert_expiry_safe()
    allow_https_access = str(not saved_cert_valid).lower()
    managed_connection = str(is_managed_connection()).lower()

    terraform_dir = os.path.join(root_dir, 'terraform')
    sh_input('just init', cwd=terraform_dir)
    sh_input((f'terraform apply -auto-approve '
              f'-var managed_connection={managed_connection} '
              f'-var allow_https_access={allow_https_access}'),
             cwd=terraform_dir)

    ansible_dir = os.path.join(root_dir, 'ansible')
    ansible_playbook(f'muzak.yml -e saved_cert_valid={saved_cert_valid} -e use_staging={args.staging_acme_server}',
                     root_dir=ansible_dir)

    if saved_cert_valid:
        # HTTPS access wasn't enabled in the first place.
        return

    sh_input((f'terraform apply -auto-approve '
              f'-var managed_connection={managed_connection} '
              f'-var allow_https_access=false'),
             cwd=terraform_dir)


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    down_cmd = subparsers.add_parser('down', aliases=['d'])
    down_cmd.set_defaults(func=down)

    up_cmd = subparsers.add_parser('up', aliases=['u'])
    up_cmd.add_argument('-f', '--fetch-certificate', action='store_true')
    up_cmd.add_argument('-p', '--staging-acme-server', action='store_true')
    up_cmd.set_defaults(func=up)

    parsed_args = parser.parse_args()
    if not hasattr(parsed_args, 'func'):
        parser.print_help()
        return

    args = Args(**{k: v for k, v in parsed_args.__dict__.items() if k != 'func'})
    parsed_args.func(args)


if __name__ == '__main__':
    main()

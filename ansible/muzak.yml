---
- hosts: localhost
  name: Cleanup local known hosts
  vars_files:
    - secret.yml

  tasks:
    - name: Ensure SSH-ability
      command:
        cmd: pressh {{ muzak_hoster }}

- hosts: muzak
  become: true

  vars:
    caddy_version: 2.7.5
    caddyfile: /etc/caddy/Caddyfile
    cert_files:
      - crt
      - json
      - key
    maybe_staging: '{{ use_staging | default(true) | bool | ternary("-staging", "") }}'
    cert_path: /caddy/.local/share/caddy/certificates/acme{{ maybe_staging}}-v02.api.letsencrypt.org-directory/{{ muzak_hoster }}
    data_folder: /mnt/navidrome
    gcsfuse_version: 1.2.0
    music_folder: /mnt/music
    navidrome_version: 0.49.3
    cert_valid: '{{ saved_cert_valid | default(true) | bool }}'
    services_dir: /etc/systemd/system

  vars_files:
    - secret.yml

  tasks:
    - name: Install packages
      ansible.builtin.apt:
        name:
          - fuse3
          - unattended-upgrades

    - name: Install gcsfuse
      ansible.builtin.apt:
        deb: https://github.com/GoogleCloudPlatform/gcsfuse/releases/download/v{{ gcsfuse_version }}/gcsfuse_{{ gcsfuse_version }}_amd64.deb

    - name: Update packages
      ansible.builtin.apt:
        name: '*'
        state: latest
        update_cache: true
      async: 600
      poll: 0
      register: apt_update

    - name: Enable unattended upgrades
      ansible.builtin.copy:
        src: unattended-upgrades.conf
        dest: /etc/apt/apt.conf.d/50unattended-upgrades

    - name: Ensure music folder
      ansible.builtin.file:
        path: '{{ music_folder }}'
        state: directory

    # Allows having the same users across different instances.
    - name: Mount attached disk
      ansible.builtin.mount:
        path: /mnt/navidrome
        src: /dev/disk/by-id/google-navidrome
        state: mounted
        fstype: ext4

    - name: Template gcsfuse service
      ansible.builtin.template:
        src: service.j2
        dest: '{{ services_dir }}/gcsfuse.service'
      vars:
        description: A user-space file system for interacting with Google Cloud Storage
        exec: '/usr/bin/gcsfuse --foreground --implicit-dirs {{ bucket }} {{ music_folder }}'

    - name: Start gcsfuse service
      ansible.builtin.systemd:
        name: gcsfuse
        state: started
        daemon_reload: true

    - name: Download Navidrome
      ansible.builtin.unarchive:
        src: https://github.com/navidrome/navidrome/releases/download/v{{ navidrome_version }}/navidrome_{{ navidrome_version }}_Linux_x86_64.tar.gz
        dest: /usr/local/bin
        remote_src: true
        include: navidrome

    - name: Template Navidrome service
      ansible.builtin.template:
        src: service.j2
        dest: '{{ services_dir}}/navidrome.service'
      vars:
        description: Modern Music Server and Streamer compatible with Subsonic/Airsonic
        exec: /usr/local/bin/navidrome --datafolder {{ data_folder }} --musicfolder {{ music_folder }}

    - name: Start Navidrome service
      ansible.builtin.systemd:
        name: navidrome
        state: started
        daemon_reload: true

    - name: Download Caddy
      ansible.builtin.unarchive:
        src: https://github.com/caddyserver/caddy/releases/download/v{{ caddy_version }}/caddy_{{ caddy_version }}_linux_amd64.tar.gz
        dest: /usr/local/bin
        remote_src: true
        include: caddy

    - name: Ensure Caddyfile dir
      file:
        path: '{{ caddyfile | dirname }}'
        state: directory

    - name: Write Caddyfile
      template:
        src: Caddyfile
        dest: '{{ caddyfile }}'

    - name: Template Caddy service
      template:
        src: service.j2
        dest: /etc/systemd/system/caddy.service
      vars:
        description: Fast, multi-platform web server with automatic HTTPS
        exec: /usr/local/bin/caddy run --config {{ caddyfile }}
        env:
          - HOME: /caddy

    - name: Ensure cert directory (staging)
      ansible.builtin.file:
        path: '{{ cert_path }}'
        state: directory
      when: cert_valid

    - name: Read cert files
      ansible.builtin.slurp:
        path: certs/cert.{{ item }}.sops
      delegate_to: localhost
      register: certs
      loop: '{{ cert_files }}'
      become: false
      when: cert_valid

    - name: Upload cert files (staging)
      ansible.builtin.copy:
        content: '{{ item.content | b64decode | community.sops.decrypt(output_type="binary", rstrip=false) }}'
        dest: '{{ cert_path }}/{{ muzak_hoster }}.{{ item.item }}'
      loop: '{{ certs.results }}'
      when: cert_valid
      no_log: true

    - name: Start Caddy service
      systemd:
        name: caddy
        state: started
        daemon_reload: true
        enabled: true

    - name: Pause 20 seconds for fetching certificates
      ansible.builtin.pause:
        seconds: 20
      when: not cert_valid

    - name: Fetch certificates (staging)
      ansible.builtin.fetch:
        src: '{{ cert_path }}/{{ muzak_hoster }}.{{ item }}'
        dest: certs/cert.{{ item }}
        flat: yes
      loop: '{{ cert_files }}'
      when: not cert_valid

    - name: Check apt update status
      async_status:
        jid: '{{ apt_update.ansible_job_id }}'
      register: update_result
      until: update_result.finished
      retries: 60
      delay: 5

- hosts: localhost
  vars:
    cert_files:
      - crt
      - json
      - key
    cert_valid: '{{ saved_cert_valid | default(true) | bool }}'

  vars_files:
    - secret.yml

  tasks:
    - name: Encrypt cert files
      community.sops.sops_encrypt:
        age: '{{ age_public_key }}'
        path: certs/cert.{{ item }}.sops
        content_text: "{{ lookup('ansible.builtin.file', 'certs/cert.{{ item }}', rstrip=false) }}"
      loop: '{{ cert_files }}'
      when: not cert_valid

    - name: Delete cert files
      file:
        path: certs/cert.{{ item }}
        state: absent
      loop: '{{ cert_files }}'
      when: not cert_valid
...
